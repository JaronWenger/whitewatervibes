{"version":3,"file":"index-BaQoobA7.js","sources":["../../main.js"],"sourcesContent":["// Import dependencies and initialize\nimport * as THREE from 'three';\nimport { Water } from 'three/examples/jsm/objects/Water.js';\nimport { Sky } from 'three/examples/jsm/objects/Sky.js';\n\n// Prevent scrolling\nwindow.addEventListener('scroll', (e) => {\n    e.preventDefault();\n    window.scrollTo(0, 0);\n}, { passive: false });\n\nwindow.addEventListener('touchmove', (e) => {\n    e.preventDefault();\n}, { passive: false });\n\nwindow.addEventListener('wheel', (e) => {\n    e.preventDefault();\n}, { passive: false });\n\n// Create scene, camera, and renderer\nconst scene = new THREE.Scene();\nscene.background = new THREE.Color(0x87CEEB); // Add sky blue background\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\nconst renderer = new THREE.WebGLRenderer({ \n    antialias: true,\n    alpha: false // Change to false since we have a background\n});\n\n// Set renderer size and position\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.setPixelRatio(window.devicePixelRatio);\nrenderer.setClearColor(0x87CEEB, 1); // Match scene background\nrenderer.toneMapping = THREE.ACESFilmicToneMapping;\nrenderer.toneMappingExposure = 1.2;\nrenderer.outputEncoding = THREE.sRGBEncoding;\nrenderer.shadowMap.enabled = true;\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n// Append renderer to body and ensure it's positioned correctly\ndocument.body.appendChild(renderer.domElement);\nrenderer.domElement.style.position = 'fixed';\nrenderer.domElement.style.top = '0';\nrenderer.domElement.style.left = '0';\nrenderer.domElement.style.width = '100%';\nrenderer.domElement.style.height = '100%';\n\n// Add sky and sun first\nconst sky = new Sky();\nsky.scale.setScalar(10000);\nscene.add(sky);\n\nconst sun = new THREE.Vector3();\nconst uniforms = sky.material.uniforms;\nuniforms['turbidity'].value = 10;\nuniforms['rayleigh'].value = 2;\nuniforms['mieCoefficient'].value = 0.005;\nuniforms['mieDirectionalG'].value = 0.8;\n\n// Set up sun position\nconst phi = THREE.MathUtils.degToRad(90 - 2);\nconst theta = THREE.MathUtils.degToRad(180);\nsun.setFromSphericalCoords(1, phi, theta);\nuniforms['sunPosition'].value.copy(sun);\n\n// Enhanced lighting setup - add this BEFORE creating water and materials\nconst mainLight = new THREE.DirectionalLight(0xffffff, 2.0);\nmainLight.position.set(50, 100, 50);\nmainLight.castShadow = true;\nmainLight.shadow.mapSize.width = 2048;\nmainLight.shadow.mapSize.height = 2048;\nmainLight.shadow.camera.near = 0.5;\nmainLight.shadow.camera.far = 500;\nscene.add(mainLight);\n\nconst backLight = new THREE.DirectionalLight(0xffffff, 1.5);\nbackLight.position.set(-50, 100, -50);\nscene.add(backLight);\n\nconst fillLight = new THREE.DirectionalLight(0xffffff, 1.0);\nfillLight.position.set(-50, 50, 50);\nscene.add(fillLight);\n\nconst ambientLight = new THREE.AmbientLight(0xffffff, 1.0);\nscene.add(ambientLight);\n\n// Create hemisphere light for better sky/ground interaction\nconst hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1.0);\nscene.add(hemiLight);\n\n// Create river with elevation changes and rapids\nconst riverLength = 1000;\nconst riverWidth = 100;\nconst riverSegments = 200;\n\nfunction createRiverGeometry() {\n    const geometry = new THREE.PlaneGeometry(riverWidth, riverLength, riverSegments, riverSegments);\n    const positions = geometry.attributes.position.array;\n    \n    // Create more random and dynamic water features\n    for (let i = 0; i < positions.length; i += 3) {\n        const x = positions[i];\n        const z = positions[i + 2];\n        \n        // Base elevation with multiple wave patterns\n        let y = -z * 0.05; // General downstream slope\n        \n        // Add multiple wave frequencies for more chaos\n        y += Math.sin(z * 0.2 + x * 0.3) * 0.8; // Large diagonal waves\n        y += Math.sin(x * 0.5 + z * 0.1) * 0.4; // Cross-stream variations\n        y += Math.sin(z * 0.8 + x * 0.4) * 0.3; // Small choppy waves\n        \n        // Add specific rapid sections with more randomness\n        if (z < -200 && z > -300) {\n            y += Math.sin(z * 0.8 + x * 0.6) * 1.2;\n            y += Math.cos(x * 0.4 + z * 0.3) * 0.7;\n            y += (Math.random() - 0.5) * 0.5; // Random chop\n        }\n        \n        if (z < -500 && z > -600) {\n            y += Math.sin(z * 1.2 + x * 0.8) * 1.8;\n            y += Math.sin(x * 0.6 + z * 0.5) * 1.0;\n            y += (Math.random() - 0.5) * 0.8; // More intense random chop\n        }\n        \n        positions[i + 1] = y;\n    }\n    \n    geometry.attributes.position.needsUpdate = true;\n    geometry.computeVertexNormals();\n    return geometry;\n}\n\nconst riverGeometry = createRiverGeometry();\n\n// Create rocks\nfunction createRock(x, z, scale) {\n    const rockGeometry = new THREE.DodecahedronGeometry(1, 1);\n    const rockMaterial = new THREE.MeshStandardMaterial({\n        color: 0x666666,\n        roughness: 0.8,\n        metalness: 0.2\n    });\n    \n    const rock = new THREE.Mesh(rockGeometry, rockMaterial);\n    rock.position.set(x, -1.5, z);\n    rock.scale.set(scale, scale * 1.2, scale);\n    rock.rotation.set(\n        Math.random() * Math.PI,\n        Math.random() * Math.PI,\n        Math.random() * Math.PI\n    );\n    \n    return rock;\n}\n\n// Add rocks to the river\nconst rocks = [];\nconst rockPositions = [\n    // First rapids section\n    { x: -20, z: -220, scale: 3 },\n    { x: 15, z: -250, scale: 2.5 },\n    { x: -10, z: -280, scale: 2 },\n    // Second rapids section\n    { x: 25, z: -520, scale: 3.5 },\n    { x: -15, z: -550, scale: 3 },\n    { x: 5, z: -580, scale: 2.5 },\n    // Scattered rocks\n    { x: -30, z: -150, scale: 2 },\n    { x: 20, z: -350, scale: 2.5 },\n    { x: -25, z: -450, scale: 2 },\n    { x: 30, z: -650, scale: 3 }\n];\n\nrockPositions.forEach(pos => {\n    const rock = createRock(pos.x, pos.z, pos.scale);\n    rocks.push(rock);\n    scene.add(rock);\n});\n\n// Create procedural riverbed texture\nfunction createRiverbedTexture() {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1024;\n    canvas.height = 1024;\n    const ctx = canvas.getContext('2d');\n    \n    // Create a noisy rock pattern\n    for (let x = 0; x < canvas.width; x++) {\n        for (let y = 0; y < canvas.height; y++) {\n            const noise1 = Math.random() * 0.3;\n            const noise2 = Math.sin(x/20) * Math.cos(y/20) * 0.2;\n            const noise3 = Math.sin(x/5 + y/10) * 0.1;\n            \n            const value = Math.min(Math.max(0.3 + noise1 + noise2 + noise3, 0), 1);\n            const color = Math.floor(value * 255);\n            \n            ctx.fillStyle = `rgb(${color}, ${color * 0.9}, ${color * 0.8})`;\n            ctx.fillRect(x, y, 1, 1);\n        }\n    }\n    \n    const texture = new THREE.CanvasTexture(canvas);\n    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n    texture.repeat.set(4, 20);\n    return texture;\n}\n\n// Create procedural normal map for riverbed\nfunction createRiverbedNormalMap() {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1024;\n    canvas.height = 1024;\n    const ctx = canvas.getContext('2d');\n    \n    for (let x = 0; x < canvas.width; x++) {\n        for (let y = 0; y < canvas.height; y++) {\n            const noise = Math.sin(x/10) * Math.cos(y/10) * 0.5 + 0.5;\n            const r = Math.floor(128 + noise * 127); // x-normal\n            const g = Math.floor(128 + noise * 127); // y-normal\n            const b = 255; // z-normal (mostly pointing up)\n            \n            ctx.fillStyle = `rgb(${r},${g},${b})`;\n            ctx.fillRect(x, y, 1, 1);\n        }\n    }\n    \n    const texture = new THREE.CanvasTexture(canvas);\n    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n    texture.repeat.set(4, 20);\n    return texture;\n}\n\n// Create procedural caustics texture\nfunction createCausticsTexture() {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1024;\n    canvas.height = 1024;\n    const ctx = canvas.getContext('2d');\n    \n    // Create caustics pattern\n    for (let x = 0; x < canvas.width; x++) {\n        for (let y = 0; y < canvas.height; y++) {\n            const noise1 = Math.sin(x/30) * Math.cos(y/30) * 0.5 + 0.5;\n            const noise2 = Math.sin(x/20 + y/40) * Math.cos(y/20 + x/40) * 0.5 + 0.5;\n            const value = (noise1 + noise2) / 2;\n            \n            const alpha = Math.min(Math.max(value * 0.7, 0), 1);\n            ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;\n            ctx.fillRect(x, y, 1, 1);\n        }\n    }\n    \n    const texture = new THREE.CanvasTexture(canvas);\n    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n    texture.repeat.set(8, 8);\n    return texture;\n}\n\n// Create riverbed with procedural textures\nfunction createRiverbed() {\n    const riverbedGeometry = createRiverGeometry();\n    \n    const riverbedTexture = createRiverbedTexture();\n    const riverbedNormal = createRiverbedNormalMap();\n    \n    const riverbedMaterial = new THREE.MeshStandardMaterial({\n        map: riverbedTexture,\n        normalMap: riverbedNormal,\n        roughness: 0.8,\n        metalness: 0.2,\n        color: 0x666666\n    });\n    \n    const riverbed = new THREE.Mesh(riverbedGeometry, riverbedMaterial);\n    riverbed.rotation.x = -Math.PI / 2;\n    riverbed.position.y = -3;\n    \n    return riverbed;\n}\n\nconst riverbed = createRiverbed();\nscene.add(riverbed);\n\n// Create water with procedural textures\nconst waterNormals = createRiverbedNormalMap(); // Reuse normal map for water\nconst causticsTexture = createCausticsTexture();\n\n// Update water material for more realistic water\nconst river = new Water(riverGeometry, {\n    textureWidth: 2048,\n    textureHeight: 2048,\n    waterNormals: waterNormals,\n    sunDirection: sun,\n    sunColor: 0xffffff,\n    waterColor: 0x001e0f,\n    distortionScale: 2.5,\n    fog: false,\n    format: THREE.RGBAFormat,\n    clipBias: 0.0,\n    alpha: 0.8,\n    reflectivity: 0.8,\n    size: 4\n});\n\n// Initialize water uniforms\nif (river.material && river.material.uniforms) {\n    river.material.uniforms['time'].value = 0;\n    river.material.uniforms['sunDirection'].value.copy(sun);\n    river.material.uniforms['distortionScale'].value = 2.5;\n    river.material.uniforms['size'].value = 4;\n    \n    // Add custom uniforms for caustics\n    river.material.uniforms['causticsTex'] = { value: causticsTexture };\n    river.material.uniforms['causticsScale'] = { value: 0.5 };\n    river.material.uniforms['causticsSpeed'] = { value: 0.05 };\n}\n\nriver.rotation.x = -Math.PI / 2;\nriver.position.y = -1.8;\nscene.add(river);\n\n// Enhanced foam particle system with varying sizes and behaviors\nfunction createFoamParticles() {\n    const particleCount = 3000; // Increased particle count\n    const particles = new THREE.BufferGeometry();\n    const positions = new Float32Array(particleCount * 3);\n    const sizes = new Float32Array(particleCount);\n    const opacities = new Float32Array(particleCount);\n    const velocities = new Float32Array(particleCount * 3); // Add velocity for each particle\n    \n    for (let i = 0; i < particleCount * 3; i += 3) {\n        // Initialize positions with more concentration in rapids\n        positions[i] = (Math.random() - 0.5) * riverWidth * 0.8;\n        positions[i + 1] = Math.random() * 0.5; // Lower height for better water contact\n        positions[i + 2] = (Math.random() - 0.5) * riverLength;\n        \n        // Initialize velocities\n        velocities[i] = (Math.random() - 0.5) * 0.1;\n        velocities[i + 1] = Math.random() * 0.05;\n        velocities[i + 2] = -0.2 - Math.random() * 0.3;\n        \n        // Vary particle sizes more dramatically\n        sizes[i/3] = 0.1 + Math.random() * 0.4;\n        opacities[i/3] = 0.2 + Math.random() * 0.6;\n    }\n    \n    particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    particles.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\n    particles.setAttribute('opacity', new THREE.BufferAttribute(opacities, 1));\n    particles.setAttribute('velocity', new THREE.BufferAttribute(velocities, 3));\n    \n    const particleMaterial = new THREE.PointsMaterial({\n        color: 0xFFFFFF,\n        transparent: true,\n        opacity: 0.6,\n        blending: THREE.AdditiveBlending,\n        sizeAttenuation: true,\n        map: createParticleTexture()\n    });\n    \n    return new THREE.Points(particles, particleMaterial);\n}\n\n// Create a more natural looking particle texture\nfunction createParticleTexture() {\n    const canvas = document.createElement('canvas');\n    canvas.width = 64;\n    canvas.height = 64;\n    const ctx = canvas.getContext('2d');\n    \n    const gradient = ctx.createRadialGradient(32, 32, 0, 32, 32, 32);\n    gradient.addColorStop(0, 'rgba(255,255,255,1)');\n    gradient.addColorStop(0.3, 'rgba(255,255,255,0.8)');\n    gradient.addColorStop(0.7, 'rgba(255,255,255,0.3)');\n    gradient.addColorStop(1, 'rgba(255,255,255,0)');\n    \n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, 64, 64);\n    \n    const texture = new THREE.Texture(canvas);\n    texture.needsUpdate = true;\n    return texture;\n}\n\n// Create water splash system\nfunction createWaterSplash() {\n    const splashCount = 1000;\n    const splashGeometry = new THREE.BufferGeometry();\n    const positions = new Float32Array(splashCount * 3);\n    const velocities = new Float32Array(splashCount * 3);\n    const lifetimes = new Float32Array(splashCount);\n    const sizes = new Float32Array(splashCount);\n    \n    for (let i = 0; i < splashCount * 3; i += 3) {\n        positions[i] = 0;\n        positions[i + 1] = 0;\n        positions[i + 2] = 0;\n        \n        velocities[i] = (Math.random() - 0.5) * 0.3;\n        velocities[i + 1] = Math.random() * 0.5;\n        velocities[i + 2] = (Math.random() - 0.5) * 0.3;\n        \n        lifetimes[i/3] = 0;\n        sizes[i/3] = 0.05 + Math.random() * 0.15;\n    }\n    \n    splashGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    splashGeometry.setAttribute('velocity', new THREE.BufferAttribute(velocities, 3));\n    splashGeometry.setAttribute('lifetime', new THREE.BufferAttribute(lifetimes, 1));\n    splashGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\n    \n    const splashMaterial = new THREE.PointsMaterial({\n        color: 0xFFFFFF,\n        transparent: true,\n        opacity: 0.6,\n        blending: THREE.AdditiveBlending,\n        sizeAttenuation: true,\n        map: createParticleTexture()\n    });\n    \n    return new THREE.Points(splashGeometry, splashMaterial);\n}\n\nconst foam = createFoamParticles();\nconst splash = createWaterSplash();\nscene.add(foam);\nscene.add(splash);\n\n// Create canyon walls\nconst canyonMaterial = new THREE.MeshStandardMaterial({ \n    color: 0x8B4513,\n    roughness: 0.8,\n    metalness: 0.2\n});\n\n// Left wall\nconst leftWall = new THREE.Mesh(\n    new THREE.PlaneGeometry(riverLength, 100),\n    canyonMaterial\n);\nleftWall.position.set(-riverWidth/2, 50, 0);\nleftWall.rotation.y = Math.PI / 2;\nscene.add(leftWall);\n\n// Right wall\nconst rightWall = new THREE.Mesh(\n    new THREE.PlaneGeometry(riverLength, 100),\n    canyonMaterial\n);\nrightWall.position.set(riverWidth/2, 50, 0);\nrightWall.rotation.y = -Math.PI / 2;\nscene.add(rightWall);\n\n// Create trees\nfunction createTree(x, z) {\n    const treeGroup = new THREE.Group();\n    \n    // Tree trunk\n    const trunkGeometry = new THREE.CylinderGeometry(0.5, 0.8, 5, 8);\n    const trunkMaterial = new THREE.MeshStandardMaterial({ color: 0x4A2F10 });\n    const trunk = new THREE.Mesh(trunkGeometry, trunkMaterial);\n    trunk.position.y = 2.5;\n    treeGroup.add(trunk);\n    \n    // Tree top\n    const topGeometry = new THREE.ConeGeometry(3, 6, 8);\n    const topMaterial = new THREE.MeshStandardMaterial({ color: 0x2D5A27 });\n    const top = new THREE.Mesh(topGeometry, topMaterial);\n    top.position.y = 7;\n    treeGroup.add(top);\n    \n    treeGroup.position.set(x, 0, z);\n    return treeGroup;\n}\n\n// Add trees along the canyon walls\nfor (let i = -400; i <= 400; i += 50) {\n    scene.add(createTree(-45, i));\n    scene.add(createTree(45, i));\n}\n\n// Create kayaker\nfunction createKayaker() {\n    const kayakerGroup = new THREE.Group();\n    \n    // Create kayak body - scaled up\n    const kayakBody = new THREE.Group();\n    \n    // Main hull shape - proper whitewater kayak profile (scaled up)\n    const points = [];\n    // Bottom profile points (bow to stern)\n    points.push(new THREE.Vector3(0, 0, -9));      // Bow tip\n    points.push(new THREE.Vector3(0, 1.2, -7.5));  // Bow rocker\n    points.push(new THREE.Vector3(0, 1.5, -4.5));  // Front deck\n    points.push(new THREE.Vector3(0, 1.2, 0));     // Center\n    points.push(new THREE.Vector3(0, 1.5, 4.5));   // Back deck\n    points.push(new THREE.Vector3(0, 1.2, 7.5));   // Stern rocker\n    points.push(new THREE.Vector3(0, 0, 9));       // Stern tip\n\n    // Create hull shape - wider in the middle\n    const hullShape = new THREE.Shape();\n    // Start at the bow\n    hullShape.moveTo(0, -1.5);\n    // Port side curve - more pronounced in middle\n    hullShape.quadraticCurveTo(-2.5, 0, 0, 1.5);  // Increased width from -1.5 to -2.5\n    // Starboard side curve - more pronounced in middle\n    hullShape.quadraticCurveTo(2.5, 0, 0, -1.5);  // Increased width from 1.5 to 2.5\n\n    // Extrude settings for the hull - adjusted for smoother transition\n    const extrudeSettings = {\n        steps: 50,\n        bevelEnabled: true,\n        bevelThickness: 0.3,\n        bevelSize: 0.3,\n        bevelSegments: 12,\n        extrudePath: new THREE.CatmullRomCurve3(points)\n    };\n\n    // Create hull geometry and material\n    const hullGeometry = new THREE.ExtrudeGeometry(hullShape, extrudeSettings);\n    const hullMaterial = new THREE.MeshStandardMaterial({\n        color: 0x0066cc,  // Pyranha blue\n        roughness: 0.5,\n        metalness: 0.2\n    });\n    const hull = new THREE.Mesh(hullGeometry, hullMaterial);\n    \n    // Create cockpit - scaled up and wider\n    const cockpitShape = new THREE.Shape();\n    cockpitShape.ellipse(0, 0, 1.4, 0.9, 0, Math.PI * 2);  // Increased width to match wider hull\n    \n    const cockpitExtrudeSettings = {\n        depth: 0.3,\n        bevelEnabled: true,\n        bevelThickness: 0.15,\n        bevelSize: 0.15,\n        bevelSegments: 4\n    };\n    \n    const cockpitGeometry = new THREE.ExtrudeGeometry(cockpitShape, cockpitExtrudeSettings);\n    const cockpitMaterial = new THREE.MeshStandardMaterial({ color: 0x222222 });\n    const cockpit = new THREE.Mesh(cockpitGeometry, cockpitMaterial);\n    cockpit.rotation.x = -Math.PI / 2;\n    cockpit.position.set(0, 1.5, 0);\n    \n    // Create cockpit rim - scaled up and wider\n    const rimGeometry = new THREE.TorusGeometry(1.4, 0.12, 16, 32);  // Increased radius to match cockpit\n    const rimMaterial = new THREE.MeshStandardMaterial({ color: 0xFFFFFF });\n    const rim = new THREE.Mesh(rimGeometry, rimMaterial);\n    rim.rotation.x = Math.PI / 2;\n    rim.position.set(0, 1.6, 0);\n    \n    kayakBody.add(hull);\n    kayakBody.add(cockpit);\n    kayakBody.add(rim);\n    kayakerGroup.add(kayakBody);\n    \n    // Create paddler - scaled up\n    const paddlerGroup = new THREE.Group();\n    \n    // Torso - scaled up\n    const torsoGeometry = new THREE.BoxGeometry(1.2, 2, 1);\n    const torsoMaterial = new THREE.MeshStandardMaterial({ color: 0x333333 });\n    const torso = new THREE.Mesh(torsoGeometry, torsoMaterial);\n    torso.position.set(0, 2.5, 0);\n    paddlerGroup.add(torso);\n    \n    // Head - scaled up\n    const headGeometry = new THREE.BoxGeometry(0.8, 0.8, 0.8);\n    const headMaterial = new THREE.MeshStandardMaterial({ color: 0x222222 });\n    const head = new THREE.Mesh(headGeometry, headMaterial);\n    head.position.set(0, 3.8, 0);\n    paddlerGroup.add(head);\n    \n    // Create paddle - scaled up\n    const paddleGroup = new THREE.Group();\n    \n    // Shaft - thicker and longer\n    const shaftGeometry = new THREE.CylinderGeometry(0.12, 0.12, 8, 12); // Doubled thickness, longer length\n    const shaftMaterial = new THREE.MeshStandardMaterial({\n        color: 0x666666,\n        metalness: 0.8,\n        roughness: 0.2\n    });\n    const shaft = new THREE.Mesh(shaftGeometry, shaftMaterial);\n    paddleGroup.add(shaft);\n    \n    // Create oval blade shape\n    const bladeShape = new THREE.Shape();\n    const radiusX = 0.8;  // Width of oval\n    const radiusY = 1.2;  // Length of oval\n    \n    // Draw oval shape\n    for (let i = 0; i <= 360; i++) {\n        const angle = (i * Math.PI) / 180;\n        const x = Math.cos(angle) * radiusX;\n        const y = Math.sin(angle) * radiusY;\n        if (i === 0) {\n            bladeShape.moveTo(x, y);\n        } else {\n            bladeShape.lineTo(x, y);\n        }\n    }\n    \n    const bladeGeometry = new THREE.ShapeGeometry(bladeShape);\n    const bladeMaterial = new THREE.MeshStandardMaterial({ \n        color: 0x000000, // Black\n        roughness: 0.7,\n        metalness: 0.2,\n        side: THREE.DoubleSide // Visible from both sides\n    });\n    \n    const blade1 = new THREE.Mesh(bladeGeometry, bladeMaterial);\n    blade1.position.y = 4; // Moved out to match longer shaft\n    blade1.position.x = 0.15; // Increased offset for thicker shaft\n    \n    const blade2 = new THREE.Mesh(bladeGeometry, bladeMaterial);\n    blade2.position.y = -4; // Moved out to match longer shaft\n    blade2.position.x = 0.15; // Increased offset for thicker shaft\n    blade2.rotation.z = Math.PI; // Flip the bottom blade 180 degrees\n    \n    paddleGroup.add(blade1);\n    paddleGroup.add(blade2);\n    \n    // Position paddle\n    paddleGroup.position.set(0, 3.2, 0);\n    paddleGroup.rotation.z = Math.PI / 2;\n    \n    paddlerGroup.add(paddleGroup);\n    kayakerGroup.add(paddlerGroup);\n    \n    return kayakerGroup;\n}\n\nconst kayaker = createKayaker();\nscene.add(kayaker);\n\n// Initial camera and kayaker position\nconst startPosition = new THREE.Vector3(0, 0, riverLength/2 - 20);\nlet kayakerPosition = new THREE.Vector3(0, 0, 0);\nkayakerPosition.copy(startPosition);\nkayaker.position.copy(startPosition);\nkayaker.rotation.y = Math.PI; // Face into the scene\n\n// Position camera behind kayaker\ncamera.position.set(0, 15, riverLength/2 + 10);\ncamera.lookAt(new THREE.Vector3(0, 0, -riverLength/2));\n\n// Kayaker movement\nconst kayakerSpeed = 0.5; // Increased for better control\nconst waterFlowSpeed = 0.2; // Increased for better movement\n\n// Handle keyboard controls\nconst keys = {\n    ArrowLeft: false,\n    ArrowRight: false,\n    ArrowUp: false,\n    ArrowDown: false\n};\n\nwindow.addEventListener('keydown', (e) => {\n    if (keys.hasOwnProperty(e.key)) {\n        keys[e.key] = true;\n    }\n});\n\nwindow.addEventListener('keyup', (e) => {\n    if (keys.hasOwnProperty(e.key)) {\n        keys[e.key] = false;\n    }\n});\n\n// Animation loop\nfunction animate() {\n    requestAnimationFrame(animate);\n\n    // Update sun and water\n    const time = performance.now() * 0.001;\n    \n    // Subtle sun movement\n    const phi = THREE.MathUtils.degToRad(90 - 2 + Math.sin(time * 0.1) * 2);\n    const theta = THREE.MathUtils.degToRad(180 + Math.cos(time * 0.1) * 5);\n    sun.setFromSphericalCoords(1, phi, theta);\n    sky.material.uniforms['sunPosition'].value.copy(sun);\n    \n    if (river.material && river.material.uniforms) {\n        river.material.uniforms['sunDirection'].value.copy(sun);\n        river.material.uniforms['time'].value = time * 0.3;\n    }\n\n    // Update water with more realistic movement\n    if (river.material && river.material.uniforms) {\n        const time = performance.now() * 0.001;\n        river.material.uniforms['time'].value = time * 0.3; // Slower movement\n        \n        // Subtle distortion variation\n        const baseDistortion = 2.5;\n        const waveDistortion = Math.sin(time * 0.2) * 0.5 + Math.cos(time * 0.1) * 0.3;\n        const rapidDistortion = Math.cos(time * 0.15) * 0.8;\n        const totalDistortion = baseDistortion + waveDistortion + \n            (kayakerPosition.z < -200 && kayakerPosition.z > -300 || \n             kayakerPosition.z < -500 && kayakerPosition.z > -600 ? rapidDistortion : 0);\n        \n        river.material.uniforms['distortionScale'].value = totalDistortion;\n        \n        // Update caustics\n        river.material.uniforms['causticsTex'].value.offset.y = time * 0.05;\n        river.material.uniforms['causticsScale'].value = 0.5 + Math.sin(time * 0.2) * 0.1;\n    }\n\n    // Calculate wave height at kayaker's position\n    const waveTime = performance.now() * 0.001;\n    const kayakX = kayakerPosition.x;\n    const kayakZ = kayakerPosition.z;\n    \n    // Complex wave height calculation based on multiple wave patterns\n    let waveHeight = Math.sin(kayakX * 0.3 + waveTime * 0.5) * 0.8; // Base wave\n    waveHeight += Math.sin(kayakZ * 0.2 + waveTime * 0.7) * 0.6; // Forward-back motion\n    waveHeight += Math.cos(kayakX * 0.4 + kayakZ * 0.1 + waveTime) * 0.4; // Diagonal waves\n    \n    // Add more intense movement in rapids\n    if (kayakZ < -200 && kayakZ > -300) {\n        waveHeight *= 1.5;\n        waveHeight += (Math.random() - 0.5) * 0.8;\n    }\n    if (kayakZ < -500 && kayakZ > -600) {\n        waveHeight *= 2;\n        waveHeight += (Math.random() - 0.5) * 1.2;\n    }\n    \n    // Apply wave height to kayaker's y position and rotation\n    kayakerPosition.y = waveHeight;\n    \n    // Calculate kayaker rotation based on wave slope\n    const pitchAngle = Math.atan2(\n        Math.cos(kayakZ * 0.2 + waveTime) * 0.2 + \n        Math.sin(kayakX * 0.3 + waveTime * 0.7) * 0.15,\n        1\n    );\n    const rollAngle = Math.atan2(\n        Math.sin(kayakX * 0.4 + waveTime) * 0.15 + \n        Math.cos(kayakZ * 0.3 + waveTime * 0.5) * 0.1,\n        1\n    );\n    \n    // Apply rotations to kayaker\n    kayaker.rotation.set(\n        pitchAngle, // Forward/backward tilt\n        Math.PI, // Base rotation (facing into scene)\n        rollAngle // Side-to-side roll\n    );\n\n    // Update kayaker position with water flow and momentum\n    const flowStrength = 0.2 + Math.sin(waveTime * 0.5) * 0.05; // Varying flow speed\n    kayakerPosition.z -= flowStrength * 2;\n\n    // Apply user controls with momentum and wave influence\n    if (keys.ArrowLeft) {\n        kayakerPosition.x -= kayakerSpeed * (1 + Math.sin(waveTime) * 0.2);\n    }\n    if (keys.ArrowRight) {\n        kayakerPosition.x += kayakerSpeed * (1 + Math.sin(waveTime) * 0.2);\n    }\n    if (keys.ArrowUp) {\n        kayakerPosition.z -= kayakerSpeed * 2 * (1 + Math.cos(waveTime) * 0.15);\n    }\n    if (keys.ArrowDown) {\n        kayakerPosition.z += kayakerSpeed * (1 + Math.cos(waveTime) * 0.15);\n    }\n\n    // Keep kayaker within bounds with wave influence\n    kayakerPosition.x = Math.max(-riverWidth/2 + 2, Math.min(riverWidth/2 - 2, kayakerPosition.x));\n    kayakerPosition.z = Math.max(-riverLength/2, Math.min(riverLength/2, kayakerPosition.z));\n\n    kayaker.position.copy(kayakerPosition);\n\n    // Update camera to follow kayaker with wave-influenced movement\n    const cameraHeight = 20 + Math.sin(waveTime * 0.3) * 2; // Dynamic camera height\n    const cameraDistance = 30 + Math.cos(waveTime * 0.4) * 3; // Dynamic camera distance\n    \n    camera.position.set(\n        kayakerPosition.x + Math.sin(waveTime * 0.2) * 2, // Slight camera sway\n        cameraHeight,\n        kayakerPosition.z + cameraDistance\n    );\n    camera.lookAt(\n        kayakerPosition.x,\n        kayakerPosition.y, // Look at actual kayaker height\n        kayakerPosition.z - 30\n    );\n\n    // Update foam particles\n    const foamPositions = foam.geometry.attributes.position.array;\n    const foamVelocities = foam.geometry.attributes.velocity.array;\n    const foamSizes = foam.geometry.attributes.size.array;\n    const foamOpacities = foam.geometry.attributes.opacity.array;\n    \n    for (let i = 0; i < foamPositions.length; i += 3) {\n        // Update position based on velocity\n        foamPositions[i] += foamVelocities[i];\n        foamPositions[i + 1] += foamVelocities[i + 1];\n        foamPositions[i + 2] += foamVelocities[i + 2];\n        \n        // Add wave influence\n        foamPositions[i + 1] += Math.sin(foamPositions[i] * 0.3 + waveTime) * 0.02;\n        \n        // Increase turbulence in rapids\n        if (foamPositions[i + 2] < -200 && foamPositions[i + 2] > -300) {\n            foamPositions[i] += (Math.random() - 0.5) * 0.2;\n            foamPositions[i + 1] += Math.random() * 0.1;\n            foamOpacities[i/3] = Math.min(1, foamOpacities[i/3] + 0.1);\n            foamSizes[i/3] = Math.min(0.8, foamSizes[i/3] + 0.05);\n        }\n        \n        if (foamPositions[i + 2] < -500 && foamPositions[i + 2] > -600) {\n            foamPositions[i] += (Math.random() - 0.5) * 0.3;\n            foamPositions[i + 1] += Math.random() * 0.15;\n            foamOpacities[i/3] = Math.min(1, foamOpacities[i/3] + 0.15);\n            foamSizes[i/3] = Math.min(1, foamSizes[i/3] + 0.08);\n        }\n        \n        // Reset particles that go out of bounds\n        if (foamPositions[i + 2] < -riverLength/2 || \n            Math.abs(foamPositions[i]) > riverWidth/2 ||\n            foamPositions[i + 1] > 2) {\n            \n            foamPositions[i] = (Math.random() - 0.5) * riverWidth * 0.8;\n            foamPositions[i + 1] = Math.random() * 0.5;\n            foamPositions[i + 2] = riverLength/2;\n            \n            foamVelocities[i] = (Math.random() - 0.5) * 0.1;\n            foamVelocities[i + 1] = Math.random() * 0.05;\n            foamVelocities[i + 2] = -0.2 - Math.random() * 0.3;\n            \n            foamSizes[i/3] = 0.1 + Math.random() * 0.4;\n            foamOpacities[i/3] = 0.2 + Math.random() * 0.6;\n        }\n    }\n    \n    // Update splash particles\n    const splashPositions = splash.geometry.attributes.position.array;\n    const splashVelocities = splash.geometry.attributes.velocity.array;\n    const splashLifetimes = splash.geometry.attributes.lifetime.array;\n    \n    // Create new splashes near kayaker in rapids\n    if ((kayakerPosition.z < -200 && kayakerPosition.z > -300) ||\n        (kayakerPosition.z < -500 && kayakerPosition.z > -600)) {\n        for (let i = 0; i < 10; i++) {\n            const index = Math.floor(Math.random() * splashPositions.length / 3) * 3;\n            if (splashLifetimes[index/3] <= 0) {\n                splashPositions[index] = kayakerPosition.x + (Math.random() - 0.5) * 4;\n                splashPositions[index + 1] = kayakerPosition.y;\n                splashPositions[index + 2] = kayakerPosition.z + (Math.random() - 0.5) * 4;\n                \n                splashVelocities[index] = (Math.random() - 0.5) * 0.3;\n                splashVelocities[index + 1] = 0.2 + Math.random() * 0.3;\n                splashVelocities[index + 2] = (Math.random() - 0.5) * 0.3;\n                \n                splashLifetimes[index/3] = 1.0;\n            }\n        }\n    }\n    \n    // Update existing splashes\n    for (let i = 0; i < splashLifetimes.length; i++) {\n        if (splashLifetimes[i] > 0) {\n            const idx = i * 3;\n            splashPositions[idx] += splashVelocities[idx] * 0.5;\n            splashPositions[idx + 1] += splashVelocities[idx + 1] * 0.5;\n            splashPositions[idx + 2] += splashVelocities[idx + 2] * 0.5;\n            \n            splashVelocities[idx + 1] -= 0.02; // Gravity\n            splashLifetimes[i] -= 0.02;\n            \n            splash.material.opacity = Math.max(0, splashLifetimes[i]);\n        }\n    }\n    \n    foam.geometry.attributes.position.needsUpdate = true;\n    foam.geometry.attributes.size.needsUpdate = true;\n    foam.geometry.attributes.opacity.needsUpdate = true;\n    splash.geometry.attributes.position.needsUpdate = true;\n    splash.material.opacity = Math.max(0.4, Math.min(0.8, splash.material.opacity));\n\n    renderer.render(scene, camera);\n}\n\n// Handle window resize\nwindow.addEventListener('resize', onWindowResize, false);\n\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n}\n\n// Start the animation\nanimate(); "],"names":["e","scene","THREE.Scene","THREE.Color","camera","THREE.PerspectiveCamera","renderer","THREE.WebGLRenderer","THREE.ACESFilmicToneMapping","THREE.sRGBEncoding","THREE.PCFSoftShadowMap","sky","Sky","sun","THREE.Vector3","uniforms","phi","THREE.MathUtils","theta","mainLight","THREE.DirectionalLight","backLight","fillLight","ambientLight","THREE.AmbientLight","hemiLight","THREE.HemisphereLight","riverLength","riverWidth","riverSegments","createRiverGeometry","geometry","THREE.PlaneGeometry","positions","i","x","z","y","riverGeometry","createRock","scale","rockGeometry","THREE.DodecahedronGeometry","rockMaterial","THREE.MeshStandardMaterial","rock","THREE.Mesh","rockPositions","pos","createRiverbedTexture","canvas","ctx","noise1","noise2","noise3","value","color","texture","THREE.CanvasTexture","THREE.RepeatWrapping","createRiverbedNormalMap","noise","r","g","b","createCausticsTexture","alpha","createRiverbed","riverbedGeometry","riverbedTexture","riverbedNormal","riverbedMaterial","riverbed","waterNormals","causticsTexture","river","Water","THREE.RGBAFormat","createFoamParticles","particles","THREE.BufferGeometry","sizes","opacities","velocities","THREE.BufferAttribute","particleMaterial","THREE.PointsMaterial","THREE.AdditiveBlending","createParticleTexture","THREE.Points","gradient","THREE.Texture","createWaterSplash","splashGeometry","lifetimes","splashMaterial","foam","splash","canyonMaterial","leftWall","rightWall","createTree","treeGroup","THREE.Group","trunkGeometry","THREE.CylinderGeometry","trunkMaterial","trunk","topGeometry","THREE.ConeGeometry","topMaterial","top","createKayaker","kayakerGroup","kayakBody","points","hullShape","THREE.Shape","extrudeSettings","THREE.CatmullRomCurve3","hullGeometry","THREE.ExtrudeGeometry","hullMaterial","hull","cockpitShape","cockpitExtrudeSettings","cockpitGeometry","cockpitMaterial","cockpit","rimGeometry","THREE.TorusGeometry","rimMaterial","rim","paddlerGroup","torsoGeometry","THREE.BoxGeometry","torsoMaterial","torso","headGeometry","headMaterial","head","paddleGroup","shaftGeometry","shaftMaterial","shaft","bladeShape","radiusX","radiusY","angle","bladeGeometry","THREE.ShapeGeometry","bladeMaterial","THREE.DoubleSide","blade1","blade2","kayaker","startPosition","kayakerPosition","kayakerSpeed","keys","animate","time","baseDistortion","waveDistortion","rapidDistortion","totalDistortion","waveTime","kayakX","kayakZ","waveHeight","pitchAngle","rollAngle","flowStrength","cameraHeight","cameraDistance","foamPositions","foamVelocities","foamSizes","foamOpacities","splashPositions","splashVelocities","splashLifetimes","index","idx","onWindowResize"],"mappings":"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"}